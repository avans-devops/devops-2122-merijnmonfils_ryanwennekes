version: '3.8'

services:
  apigateway:
    build:
      context: ./apigateway
      dockerfile: dockerfile
    environment:
      PORT: 3000
      AUTH_PORT: 3001
      SIGNATURE_KEY: DITMOETGEINJECTEERDWORDEN
      USER_SERVICE_NAME: userservice
      USER_SERVICE_PORT: 3002
    volumes:
      - ./apigateway:/apigateway
    ports:
      - 3000:3000
    restart: always
    depends_on:
      - authenticationservice
      - userservice
  authenticationservice:
    build:
      context: ./authenticationservice
      dockerfile: dockerfile
    environment:
      PORT: 3001
      DB_PORT: 27017
      DB_NAME: authenticationdatabase
      DB_USER: username
      DB_PASSWORD: password
      SIGNATURE_KEY: DITMOETGEINJECTEERDWORDEN
    volumes:
      - ./authenticationservice:/authenticationservice
    ports:
      - 3001:3001
  authenticationdatabase:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=username
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=authenticationdatabase
    ports:
      - 27017:27017
    restart: always
    volumes:
      - authentication_db_volume:/data/authentication
  rabbitmq:
    image: rabbitmq:3.10-rc-management
    hostname: MessageQueue
    volumes:
      - ./rabbitmq/etc/definitions.json:/etc/rabbitmq/definitions.json
      - ./rabbitmq/etc/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/data:/var/lib/rabbitmq/data
      - ./rabbitmq/logs:/var/log/rabbitmq/log
    ports:
      - 5672:5672
      - 15672:15672
  userservice:
    build:
      context: ./userservice
      dockerfile: dockerfile
    environment:
      PORT: 3002
      DB_PORT: 27017
      DB_NAME: userdb
      DB_USER: username
      DB_PASSWORD: password
      CLOUDINARY_URL: cloudinary://559531251433398:SHVH8OeOpoP_ERQWjODpQtR4lyI@avansryan
      AMQP_USER: guest
      AMQP_PASSWORD: guest
      AMQP_SERVICE: rabbitmq
      AMQP_PORT: 5672
      JWT_SIGNATURE_KEY: DITMOETGEINJECTEERDWORDEN
    volumes:
      - ./userservice:/userservice
    ports:
      - 3002:3002
    restart: always
    depends_on:
      - userdb
      - rabbitmq
  userdb:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=username
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=userdb
    ports:
      - 27018:27017
    restart: always
    volumes:
      - userdb_volume:/data/user
  scoringrpc:
    build:
      context: ./scoringrpc
      dockerfile: dockerfile
      args:
        PORT: 3003
    environment:
      IMAGGA_SIGNATURE_KEY: YWNjXzYyNzMzZjBhODk1OWU4Zjo2ZWE3N2M0NGU0YjdjNDQ4Y2Q5MTU5ODE1MTJjZDU4MQ==
      AMQP_USER: guest
      AMQP_PASSWORD: guest
      AMQP_SERVICE: rabbitmq
      AMQP_PORT: 5672
    volumes:
      - ./scoringrpc:/scoringrpc
    ports:
      - 3003:3003
    depends_on:
      - rabbitmq
      - userservice
volumes:
    authentication_db_volume:
    userdb_volume:
  # db-exporter:
  #   image: bitnami/mongodb-exporter:latest
  #   command: --mongodb.uri=mongodb://username:password@mongo:27017
  #   depends_on:
  #     - mongo
  # prometheus:
  #   image: prom/prometheus:latest
  #   volumes:
  #     - ./prometheus:/etc/prometheus
  #     - prometheus-data:/prometheus
  #   ports:
  #     - 9090:9090
  #   command: --web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yml
  #   depends_on:
  #     - db-exporter
  #     - api
  # grafana:
  #   build: ./grafana
  #   ports:
  #     - 3001:3001
  #   environment:
  #     - GF_SERVER_HTTP_PORT=3001
  #   depends_on:
  #     - prometheus
  # prometheus-data:
